#summary Design Assessment Report
#labels Phase-Design

=Design Assessment Report=

==About 1453== 

1453 is a real-time strategy game about the early days of the Ottoman Empire. The game will use SDL and its sister libraries under C++. It will run on both Windows and Linux systems natively. Here are a few planned features

  * Single Player Game
  * Original Graphics, Music and Sounds
  * Completely a Turkish User Interface
  * A Challenging Artificial Intelligence


==Design Assessments==

===SDL Libraries===

Many sister libraries of the SDL library are in use. In the following design approaches, these libraries will be referenced. 

  * *SDL_image:* SDL loads only BMP images. BMP files are uncompressed large files, without support for transparency. SDL_image lets the usage many common image formats, like JPG and PNG, which allocate less space and PNG have support transparency. Even though these image formats are smaller on disk size, they are the same size when they are drawn with SDL.
  * *SDL_gfx:* SDL_gfx draws geometrical shapes, like lines, empty or filled circles, rectangles and squares.
  * *SDL_mixer:* SDL loads only WAV files. Like BMP files, these are uncompressed large files. SDL_mixer can use common audio formats like OGG and MP3. SDL_mixer, also has a built-in music channel for effectively playing music during the game. For the game, all audio files are planned to be encoded in OGG.
  * *SDL_ttf:* SDL_ttf lets us use True Type Font files. SDL_ttf is one of the most important libraries that are used, as it makes the application have a Turkish interface without any trouble. 

===GUI Design===

Although there are a few SDL libraries for GUI, none of them seems to satisfy the project  requirements. The game will have a Turkish interface, but the user interface libraries have a few distinctive problems

  * they were too old (around 2001) to use with the current version of SDL
  * they were incomplete
  * they were too big, or too small
  * and most importantly, they did not support Turkish characters...

So, it is decided to design a new graphical user interface along with the widgets that are required. The GUI system, which is called SDLGUI as a code name, has a simple design which has small similarities to another GUI toolkit, Qt. 

The design is based on a class called `SDLWidget`, which is the base of all the derived classes. `SDLWidget` has basic variables for representing an image on the screen, which are the x, y coordinates, width and height. It also has an `SDL_Surface` which is a basic type of SDL library. `SDL_Surface` is always a pointer which a surface is held. The surface should be freed with `SDL_FreeSurface(SDL_Surface*)`. 

In `SDLWidget`, SDL_image library is used to be able to load JPG and PNG images. PNG images are mostly used for their transparency. 

`SDLLabel`, like all other widgets, is derived from `SDLWidget`. It's one of the base widgets, as it allows the use of any text like an `SDL_Surface`. It uses SDL_ttf to render these surfaces. It's the widget that makes the application have Turkish characters.

`SDLButton`, is also one of the basic widgets. It is used by almost all of the widgets. The widget has a `clicked` variable, which connects it to any function of any class. This is how the `SDLButton` gets the job done. The library, which is simply called `callback.h` is written by Rich Hickey. `SDLButton` may have an `SDLLabel`.

The other derived classes are `SDLProgressBar`, a progress bar suitable for Loading screens and Health Bars of the units, `SDLCheckBox`, a simple checkbox for turning on and off some options. `SDLTextView` is a text area which displays a long text, wrapping it into lines.

`SDLCombo` and `SDLListView` are two classes which use `SDLComboOption` and `SDLListViewItem` respectively as their children widgets. 

`SDLCommandButton` is a special type of button, which displays information about it when the mouse is hovered on it. This button is mostly designed to be used in units and buildings. 

All widgets have the basic `setPosition(int, int)` function, which puts them on a fixed position on screen. For simplicity a layout manager is not planned. 

Having all these widgets, there are two ways to display them on screen. One is to use the `drawWidget()` function, the other one is to add them to an `SDLScreen` which simply holds all types of widgets and displays them in order. `SDLScreen` also passes events to these widgets as each widgets handles these events internally. 

Below is a class diagram of these classes:



[http://img244.imageshack.us/img244/7182/sdlguiad3.png]


===Application, Game and Player Design===

Following an object oriented approach, an Application class is designed. During the execution of the program, there is only one Application object. This class wraps the SDL initializing functions. It also holds the screens of the game, which are the derivatives of `SDLScreen` object. 

Within these screens, a new `Game` object can be created. `Game` class is also a special case, as there can only be one object of this class during the execution. `Game` has connections to many other classes, some of them are part of `SDLGUI`. 

The third class is called `Player`. `Game` has two `Player` variables. One is for the actual player of the game, the other one is the one controlled by the artificial intelligence. 

The `Player` class have `Resource`s like `Wood`, `Food` and `Stone`, objects like `Tech`, `BaseUnit` and `BaseBuilding`. These three classes are derived from `BaseObject` while `BaseUnit` and `BaseBuilding` also derive from `BaseGraphicObject`. `BaseGraphicObject`'s most important variable is `Sprite`, which animates images on screen. 

All technologies, units and buildings derive from Tech, BaseUnit and BaseBuildings respectively. 

Below, there is a class diagram about how these classes are related.


[http://img244.imageshack.us/img244/1060/gametw7.png]



===Map Design=== 

SERKAN

===Units, Buildings and Technologies===

The `Player` class is the one which is controlled by the actual player. One object of this class is controlled by the computer. To win the game, the player class should reach some goals using the resources on the map and his objects.

The base class `BaseObject` holds the information for basic and common variables of these objects. The most important of them are the `Cost`, which is the cost of the object with the combination of three resources on the map; `Wood`, `Food` and `Stone`. 

The other important variables is the requirements list. Each object depends on other objects, so before creating the object, the requirements list should be checked. 

Technology class `Tech` is not displayed on the map, so `BaseBuilding` and `BaseUnit` are also derived from another class; `BaseGraphicObject` which holds their positions and their display variables.

[http://img57.imageshack.us/img57/6834/unitsic2.png]

===Putting It All Together===
_buranın başlığını sonra değiştirelim, çok gayri ciddi_

The design phase also includes how the game will run. 



==Basic Classes==

There are some basic or wrapper classes around SDL and its sister libraries which were not mentioned above. 

===SDLFont===

SDLFont, is mostly used behind the scenes in SDLLabel as a wrapper to SDL_ttf. It creates a new SDL_Surface and passes it to SDLLabel... 

(SEVİL?)


===SDLMixer===

Sounds are another part of the project.We need to make some sounds when you push the one images of the villagers or soldiers.We decide to use SDLMixer to play this kind of sounds and music.And we choose audio format of ogg because of the small size of it and licanse problem of the audio formats of wavs and mp3s.

In SDL there are things that must do.When you want to play sound you must adjust,check mixer SetMixer() and free the memory (~SDLMixer).In SDLMixer audio formats like ogg,mp3 have to be declared  as MixChunk.Because of this we declared our sounds as MixChunk.

There is a main class SDLMixer.In this class has some functions to play the music play(),to load loadFile() and to adjust the sound volume setVolume().


===SDLMusic===

This class is mostly have static variables, as there can be only one music playing at a time. Also, `SDL_mixer` has a single channel for playing music, so the functions related effects only one variable.

